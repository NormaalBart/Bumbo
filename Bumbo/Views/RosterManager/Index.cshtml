@model Bumbo.Models.RosterManager.RosterDayViewModel



<h1 class=" col-sm d-flex justify-content-center flex-nowrap">Rooster</h1>



<div class="d-flex justify-content-between m-4 border rounded-2">
    <button class="btn btn-outline-primary">
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(-1).Date"> Vorige dag </a>
    </button>
    
    <p>Week @Model.GetWeekNumber(Model.Date) | @Model.Date.ToShortDateString() </p>

    <button class="btn btn-outline-primary">
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(1).Date"> Volgende dag </a>
    </button>


</div>



<div>
    <button btn btn-outline-secondary>
        <a class="text-decoration-none" asp-action="Edit" asp-controller="Prognosis" asp-route-id="@Model.PrognosisDayId">(Edit prognose) Nog te roosterde uren: </a>
    </button>

</div>
  
<div>

    <dl class="row border">
        <div class="border col-sm d-flex justify-content-center flex-nowrap">

            <dt>
                @Html.DisplayNameFor(model => model.CassierePrognose) :
            </dt>
            <dd>
                @if (Model.CassierePrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.CassierePrognose Uren</span>
                }
            </dd>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <dt>
                @Html.DisplayNameFor(model => model.FreshPrognose) :
            </dt>
            <dd>
                @if (Model.FreshPrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.FreshPrognose Uren</span>
                }
            </dd>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <dt>
                @Html.DisplayNameFor(model => model.StockersPrognose) :
            </dt>
            <dd>
                @if (Model.StockersPrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.StockersPrognose Uren</span>
                }
            </dd>
        </div>



    </dl>
</div>

<div>
    <div class="h-100 d-flex align-items-center justify-content-center">
        <form>
            <div class="form-group">
                <button class="btn btn-outline-primary">
                    <a type="submit" class="text-decoration-none" asp-action="Index" asp-route-department=""> Update rooster </a>
                </button>

            </div>
        </form>
    </div>

    <div class="border border-1" style="background-color: white;">

        <div class="h-100 d-flex align-items-center justify-content-center">
            <div style="background-color: yellow ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Kassa afdeling</p>
            </div>
            <div style="background-color: green ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Vers afdeling</p>
            </div>
            <div style="background-color: saddlebrown ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Vakken vuller afdeling</p>
            </div>
            <div style="background-color: white ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Niet ingepland</p>
            </div>
            <div style=" background-color: red ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder"> Niet beschikbaar </p>

            </div>

        </div>




        <!--table, 24 long horizontal -->
        <table class="table" style="background-color: white;">
            <thead>
                <tr style="width: 4%;">
                    <th>Werknemer Naam</th>
                    @for (int i = 7; i < 25; i++)
                    {

                        <th>@i</th>
                    }
                </tr>
            </thead>



            <tbody>

                <!--For each available employee, create a row-->
                @if (Model.Employees != null)
                {
                    foreach (var employee in Model.Employees)
                    {
                        <tr style="width: 4%;">
                            <td>
                                @employee.FullName

                            </td>
                            @for (int i = 7; i < 24; i++)
                            {


                                @if (Model.IsPlanned(employee, i))
                                {
                                    // TODO: Redo code
                                    @*switch (Model.GetEmployeeDepartmentShift(employee, i))
                                    {
                                        case DepartmentEnum.Cassiere:
                                            <td style="width: 4%; background-color: yellow ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        case DepartmentEnum.Fresh:
                                            <td style="width: 4%; background-color: green ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        case DepartmentEnum.Stocker:
                                            <td style="width: 4%; background-color: saddlebrown ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        default:
                                            <td style="width: 4%; background-color: white ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                    }*@
                                }
                                else
                                {

                                    if (Model.IsUnavailable(employee, i))
                                    {
                                        <td style=" width: 4%; background-color: red ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                    }
                                    else
                                    {
                                        <td style=" width: 4%; background-color: white ; padding: 10px; border: 1px solid darkgrey;">

                                            @*<div> <a class="nav-link text-dark" asp-area="" asp-controller="RosterManager" asp-route-employeeId="@employee.Id" asp-route-prognosisId="@Model.PrognosisDay.Id" asp-route-dateInput="@Model.Date.AddHours(i)" asp-action="Create"></a> </div>*@
                                        </td>
                                    }

                                }



                            }
                            <td>
                                <a class="nav-link text-dark" asp-area="" asp-controller="RosterManager" asp-route-employeeId="@employee.Id" asp-route-prognosisId="@Model.PrognosisDayId" asp-route-dateInput="@Model.Date.ToShortDateString()" asp-action="Create">Voeg dienst toe</a>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>

    </div>

</div>



@section Head{ 
    <link type="text/css" rel="stylesheet" href="themes/calendar_g.css"/>
    <link type="text/css" rel="stylesheet" href="themes/calendar_green.css"/>
    <link type="text/css" rel="stylesheet" href="themes/calendar_traditional.css"/>
    <link type="text/css" rel="stylesheet" href="themes/calendar_transparent.css"/>
    <link type="text/css" rel="stylesheet" href="themes/calendar_white.css"/>
}

<div style="display: flex">

    <div style="margin-right: 10px;">
        <div id="nav"></div>
    </div>

    <div style="flex-grow: 1;">

        <div class="space">
            Theme: <select id="theme">
                <option value="calendar_default">Default</option>
                <option value="calendar_white">White</option>
                <option value="calendar_g">Google-Like</option>
                <option value="calendar_green">Green</option>
                <option value="calendar_traditional">Traditional</option>
                <option value="calendar_transparent">Transparent</option>
            </select>
        </div>

        <div id="dp"></div>
    </div>

</div>


<script src="~/lib/daypilot/daypilot-all.min.js" asp-append-version="true"></script>
<script>
    const nav = new DayPilot.Navigator("nav", {
        showMonths: 3,
        skipMonths: 3,
        selectMode: "Week",
        onTimeRangeSelected: args => {
            dp.update({
                startDate: args.day
            });
            app.loadEvents();
        }
    });
    nav.init();

    const dp = new DayPilot.Calendar("dp", {
        viewType: "Week",
        eventDeleteHandling: "Update",
        onEventDeleted: async (args) => {
            const id = args.e.id();
            await DayPilot.Http.delete(`/api/CalendarEvents/${id}`);
            console.log("Deleted.");
        },
        onEventMoved: async (args) => {
            const id = args.e.id();
            const data = {
                id: args.e.id(),
                start: args.newStart,
                end: args.newEnd,
                text: args.e.text()
            };
            await DayPilot.Http.put(`/api/CalendarEvents/${id}`, data);
            console.log("Moved.");
        },
        onEventResized: async (args) => {
            const id = args.e.id();
            const data = {
                id: args.e.id(),
                start: args.newStart,
                end: args.newEnd,
                text: args.e.text()
            };
            await DayPilot.Http.put(`/api/CalendarEvents/${id}`, data);
            console.log("Resized.");
        },
        onTimeRangeSelected: async (args) => {
            const form = [
                {name: "Name", id: "text"}
            ];

            const modal = await DayPilot.Modal.form(form, {});
            dp.clearSelection();

            if (modal.canceled) {
                return;
            }

            const event = {
                start: args.start,
                end: args.end,
                text: modal.result.text
            };
            const {data} = await DayPilot.Http.post(`/api/CalendarEvents`, event);

            dp.events.add({
                start: args.start,
                end: args.end,
                id: data.id,
                text: modal.result.text
            });
            console.log("Created.");

        },
        onEventClick: async (args) => {
            const form = [
                {name: "Name", id: "text"}
            ];

            const modal = await DayPilot.Modal.form(form, args.e.data);
            if (modal.canceled) {
                return;
            }

            const id = args.e.id();
            const data = {
                id: args.e.id(),
                start: args.e.start(),
                end: args.e.end(),
                text: modal.result.text
            };
            await DayPilot.Http.put(`/api/CalendarEvents/${id}`, data);

            dp.events.update({
                ...args.e.data,
                text: modal.result.text
            });
            console.log("Updated.");

        }

    });
    dp.init();


    const app = {
        elements: {
            theme: document.querySelector("#theme")
        },
        loadEvents() {
            dp.events.load("/api/CalendarEvents");
        },
        init() {
            app.elements.theme.addEventListener("change", () => {
                dp.update({
                    theme: app.elements.theme.value
                });
            });

            app.loadEvents();
        }
    };
    app.init();


</script>