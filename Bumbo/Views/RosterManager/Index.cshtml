@model Bumbo.Models.RosterManager.RosterDayViewModel

@{
    ViewBag.data = "Rooster";
    if (Model.ErrorMessage != null)
    {
        ViewData["Title"] = "Rooster (1)";
    }
    else
    {
        ViewData["Title"] = "Rooster";
    }

}

<body class="roster-body">

<h1 class=" col-sm d-flex justify-content-center flex-nowrap">Rooster</h1>

@if (Model.CopiedShifts != 0)
{
    <p class="alert-success text-center">@Model.CopiedShifts diensten succesvol gekopiëerd naar een andere week.</p>
}


<!-- if modelstate that returned is not valid, say that saving failed-->
@if (Model.ErrorMessage != null)
{
    <div class="alert alert-danger text-center" role="alert">
        <strong>Oeps!</strong> De veranderingen konden niet opgeslagen worden omdat @Model.ErrorMessage
    </div>
}

@* Display CAO errors *@
@if (Model.InvalidShifts.Count > 0)
{
    <div class="alert alert-danger text-left" role="alert">
        <i class="bi-exclamation-triangle-fill"></i><strong> Oeps!</strong> Er zijn CAO overtredingen, deze zullen verholpen moeten worden voordat een nieuwe dienst aangemaakt kan worden.
        <ul>
            @foreach (var modelInvalidShift in Model.InvalidShifts)
            {
                <li>@modelInvalidShift.Key.GetErrorMessage()</li>
                <ul>
                    @foreach (var shift in modelInvalidShift.Value)
                    {
                        <li>
                            <strong>@shift.Employee.FullName():</strong> @shift.StartTime.ToString("HH\\:mm") - @shift.EndTime.ToString("HH\\:mm")
                        </li>
                    }
                </ul>
            }
        </ul>
    </div>
}

<div class="top-date-header  d-flex justify-content-between m-2 border rounded-2 align-items-center border border-5 border-dark">
    <div>
        <!--Arrow to left, using an online arrow png-->
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(-1).Date">
            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-bar-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M12.5 15a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5zM10 8a.5.5 0 0 1-.5.5H3.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L3.707 7.5H9.5a.5.5 0 0 1 .5.5z"/>
            </svg>
        </a>
    </div>
    <div>
        <!--Week  number, date information which is in the center.-->
        <p>Week @Model.GetWeekNumber(Model.Date) | @Model.Date.ToShortDateString() </p>
    </div>
    <div>
        <!--Arrow to right, using an online arrow png on the right side of the bar.-->
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(1).Date">
            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-arrow-bar-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M6 8a.5.5 0 0 0 .5.5h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L12.293 7.5H6.5A.5.5 0 0 0 6 8zm-2.5 7a.5.5 0 0 1-.5-.5v-13a.5.5 0 0 1 1 0v13a.5.5 0 0 1-.5.5z"/>
            </svg>
        </a>
    </div>
</div>

<div>

    <div class="row border ">
        <div class="border col-sm d-flex justify-content-center flex-nowrap ">

            <div>
                @Html.DisplayNameFor(model => model.CassierePrognose) :
            </div>
            <div>
                @if (Model.CassierePrognose == -1)
                {
                    <span>Geen informatie</span>
                }
                else
                {
                    <span>@Model.CassierePrognose Uren</span>
                }
            </div>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <div>
                @Html.DisplayNameFor(model => model.FreshPrognose) :
            </div>
            <div>
                @if (Model.FreshPrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.FreshPrognose Uren</span>
                }
            </div>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <div>
                @Html.DisplayNameFor(model => model.StockersPrognose) :
            </div>
            <div>
                @if (Model.StockersPrognose == -1)
                {
                    <span>Geen informatie</span>
                }
                else
                {
                    <span>@Model.StockersPrognose Uren</span>
                }
            </div>
        </div>


    </div>
</div>


<script>
    'use strict';

    // list of all shifts on screen.
    var listshifts = []; 

    // we use a script to get the width of a normal cell and base the width of the shift div on that, so that it should resize along with the screen if it changes.
    function getWidthOfbase(elem, hours, minutepercstart, minutepercend) {


        // So what we do here is we get the normal width of the first cell in the table
        // we'll use this as a template for the width.
        // We calculate the final width of the div
        // using the width of a normal cell, times the amount of hours.
        // We then calculate the offset of the div, using the time percentages.

        let cell = document.querySelector('.roster-table-cell');
        let width = cell.offsetWidth;

        let finalwidth = (width * hours);

        // this is the offset of the div caused by any minutes in the shift.
        let startoffset = (width * (minutepercstart * 0.01));
        let endoffset = (width * (minutepercend * 0.01));
        

            // The longer a shift is, there's a small offset where it sticks out.
            // TODO actually solve this issue.
            let weirdOffset = (hours * 0.25);
        
        // We set the width of the div using the calculated values.
            elem.style.width = finalwidth - startoffset + endoffset - weirdOffset + 'px';
        
    

        // We move the div right using the minute percentages.
        elem.style.marginLeft = startoffset + 'px';

        
    }

    function resize(shift){
        getWidthOfbase(shift.element, shift.shiftlength, shift.shiftstartperc, shift.shiftendperc);
    }

    // Everytime the screen is resized, we resize every shift that's in the list along with it.
    window.addEventListener("resize", function () {
        listshifts.forEach(resize);
    });

    window.addEventListener('load', function () {
            listshifts.forEach(resize);

});

    // When you click on a shift, this function is called.
    // This sets the modal to be in edit mode.
    // and sets the id of the shift.
    function onShiftClick(shiftinfo){
        var modal = document.getElementById("modal");
        modal.style.display = "block";
        var createmodal = document.getElementById("createshiftmodal");
        createmodal.style.display = "none";
        var editmodal = document.getElementById("editshiftmodal");
        editmodal.style.display = "block";
        
        document.getElementById("shiftIdInput").value = shiftinfo.shiftid;
        document.getElementById("starttimeinput").value = shiftinfo.shiftStartHour;
            
        document.getElementById("endtimeinput").value = shiftinfo.shiftEndTimeHour;
           
        document.getElementById("departmentIdInput").value =  shiftinfo.shiftDepartmentId;
        document.getElementById("employeeIdInput").value = shiftinfo.shiftEmployeeId;
    }

    function onRowClick() {
        var modal1 = document.getElementById("modal");
        modal.style.display = "block";
        var createmodal = document.getElementById("createshiftmodal");
        createmodal.style.display = "block";
        var editmodal = document.getElementById("editshiftmodal");
        editmodal.style.display = "none";
    }


</script>



<div class="text-center m-3">

   

    <!-- Trigger/Open The Second Modal, to copy between weeks -->
    <button id="copyWeekModalBtn" class="btn btn-primary">Rooster kopieren tussen weken</button>

     <!-- Trigger/Open The Modal -->
    <button id="openModalBTN" class="btn btn-primary">Voeg dienst toe<span class="bi bi-plus-lg ms-1"></span></button>

    <button id="generate-roster" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="@(Model.RosteredEmployees.Count > 0 ? "Door aan te vullen zal het systeem automatisch diensten plannen, tot dat de prognose bereikt is." : "Genereert een rooster automatisch, die voldoet aan de ingestelde prognose.")"><span id="generate-roster-spinner" class="spinner-border spinner-border-sm me-2"></span>@(Model.RosteredEmployees.Count > 0 ? "Rooster aanvullen" : "Rooster genereren")<span class="bi bi-magic ms-1"></span></button>
</div>




<div class="table-responsive-sm">

    <!--table, 24 long horizontal -->
    <table class="table roster-table table-hover" style="background-color: white;">
        <thead>
        <tr class="">
            <th class="border border-2 border-dark roster-table-employee-cell roster-table-header-cell text-center">Naam</th>
            @*Important note: The text in the header blocks must be equal characters long.*@
            @for (var i = 0; i < 24; i++)
            {
                <th class="small border border-2 border-dark roster-table-header-cell text-center">@Model.GetHeaderTimeString(i)</th>
            }
        </tr>
        </thead>

        <tbody>

        <!--For each available employee, create a row-->
        @if (Model.RosteredEmployees != null)
        {
            foreach (var employee in Model.RosteredEmployees)
            {
                <tr class="roster-shift-containter">
                    <td class="small roster-table-employee-cell">
                        @employee.FullName
                    </td>

                    @for (var i = 0; i < 24; i++)
                    {
                        var shift = Model.GetShiftOnHourOfEmployee(employee, i);
                        @if (shift != null)
                        {
                            var invalidPairs = shift.ValidatesRules;
                            var showError = invalidPairs.Any();
                            // Red background when shift is invalid.
                            var background = showError ? "background: red;" : "";
                            var error = showError ? string.Join(" | ", invalidPairs.Select(s => s.GetErrorMessage())) : "";

                            <td id="roster-start" class="roster-table-cell" title="@error">
                                <div id="roster-start-div " class="roster-shift text-center" style="height: 100%; @background" runat="server">
                                    @*If the shift is very short, we use a different string not make it ugly.*@
                                    @if (Model.GetShiftHourLength(employee, i) < 2)
                                    {
                                        <p class="align-self-center"> @Model.GetShiftOnHourOfEmployee(employee, i).Department.DepartmentName </p>
                                    }
                                    else
                                    {
                                        <p class="align-self-center"> * @Model.GetShiftOnHourOfEmployee(employee, i).Department.DepartmentName *</p>
                                    }

                                    @if (showError)
                                    {
                                        <i class="bi-exclamation-triangle"></i>
                                    }

                                    <script>
                                            // gets the div above, and passes it to a function which then sets the div length based on the shift length.
                                            var divs = document.querySelectorAll('div');
                                            var above_div = divs[divs.length - 1];

                                            getWidthOfbase(above_div, @Model.GetShiftHourLength(employee, i), @Model.GetShiftStartPercentage(employee, i), @Model.GetShiftEndPercentage(employee, i));

                                            // we add this shift to the list of shifts:
                                                var shift = { element: above_div, shiftlength: @Model.GetShiftHourLength(employee, i), shiftstartperc: @Model.GetShiftStartPercentage(employee, i), shiftendperc: @Model.GetShiftEndPercentage(employee, i), shiftid: @Model.GetShiftOnHourOfEmployee(employee, i).Id, shiftStartTime: '@Model.GetShiftOnHourOfEmployee(employee, i).StartTime.ToString("HH:mm")', shiftEndTime: '@Model.GetShiftOnHourOfEmployee(employee, i).EndTime.ToString("HH:mm")'};
                          
                                            listshifts.push(shift);

                                            // possibly in the future 
                                            // shiftid, employeename, employeeid, departmentname, departmentid, starttime, endtime 
                                            // pass these values along with the function to auto fill the modal.

                                            var shiftinfo = { 
                                                shiftid: shift.shiftid, 
                                                shiftStartHour: shift.shiftStartTime, 
                                                shiftEndTimeHour: shift.shiftEndTime, 
                                                shiftDepartmentId: '@Model.GetShiftOnHourOfEmployee(employee, i).Department.Id', 
                                                shiftEmployeeId: '@employee.Id',
                                            };

                                            above_div.addEventListener("click", onShiftClick.bind(this, shiftinfo), false);
                                                above_div.addEventListener('click', () => {
                                                    onShiftClick.bind(this, shiftinfo);
                                                    
                                                });
                                            </script>
                                </div>

                            </td>
                        }
                        else
                        {
                            if (Model.IsPlanned(employee, i))
                            {
                                <td class="roster-table-cell">
                                </td>
                            }
                            else
                            {
                                <td class="roster-table-cell roster-table-cell-empty">
                                </td>
                            }
                        }
                    }

                </tr>
            }

            <!--Add new shift row.-->

            <tr class="roster-shift-containter roster-table-addbtn border border-3" id="AddShiftRow">
                <td colspan="25" class="roster-table-employee-cell text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"/>
                    </svg>
                    Dienst toevoegen
                </td>

            </tr>
        }

        </tbody>
    </table>

</div>

@if (Model.RosteredEmployees.Count == 0)
{
    <div class="justify-content-center mx-auto d-flex justify-content-center">

        <span class="alert alert-primary text-center "> Er zijn op dit moment nog geen medewerkers ingepland, voeg een nieuwe medewerker toe aan het rooster met de knop hierboven.</span>
    </div>
}

<div id="modal" class="modal">

    <!-- Modal content -->
    <div class="modal-content text-center prognosis-textarea">
        <span class="close position-absolute">&times;</span>
        <label> </label>
        <!-- The Modal for creating a new shift -->
        <div id="createshiftmodal" class="m-3 text-center align-content-center">
            <form asp-action="CreateShift">
                <input type="hidden" asp-for="Date"/>
                <h2>Voeg een dienst toe</h2>
                <div class="row">
                    <span class="col">Medewerker:</span>
                    <select asp-for="SelectedEmployeeId" class="form-control col">

                        @foreach (var employee in Model.AvailableEmployees)
                        {
                            <option value="@employee.Id">@employee.FullName</option>
                        }
                    </select>

                    @*TODO make it so you can only select department for employee who have them.*@
                    <span class="col">In afdeling:</span>

                    <select asp-for="SelectedDepartmentId" class="form-control col">

                        @foreach (var dep in Model.Departments)
                        {
                            <option value="@dep.Id">@dep.DepartmentName</option>
                        }
                    </select>
                </div>
                <div class="row">
                    <span class="col">Startijd:</span>
                    <input asp-for="SelectedStartTime" class="form-control col"/>

                    <span class="col">Eindtijd:</span>
                    <input asp-for="SelectedEndTime" class="form-control col"/>
                </div>
                <label> </label>
                <input type="submit" value="Opslaan" class="btn btn-success btn-sm "/>
            </form>
        </div>

        <!--This is the modal for editing a shift.-->
        <div id="editshiftmodal" class="m-3 text-center align-content-center">
            <form asp-action="EditShift">
                <input type="hidden" asp-for="Date"/>
                <input id="shiftIdInput" type="hidden" asp-for="SelectedShiftId"/>
                <h2>Wijzig een dienst</h2>
                <div class="row">
                    <span class="col">Medewerker:</span>

                    <select id="employeeIdInput" asp-for="SelectedEmployeeId" class="form-control col">

                        @foreach (var employee in Model.AvailableEmployees)
                        {
                            <option value="@employee.Id">@employee.FullName</option>
                        }
                    </select>
                    @*TODO make it so you can only select department for employee who have them.*@
                    <span class="col">In afdeling:</span>

                    <select id="departmentIdInput" asp-for="SelectedDepartmentId" class="form-control col">

                        @foreach (var dep in Model.Departments)
                        {
                            <option value="@dep.Id">@dep.DepartmentName</option>
                        }
                    </select>
                </div>
                <div class="row">
                    <span class="col">Startijd:</span>
                    <input id="starttimeinput" asp-for="SelectedStartTime" class="form-control col"/>

                    <span class="col">Eindtijd:</span>
                    <input id="endtimeinput" asp-for="SelectedEndTime" class="form-control col"/>
                </div>
                <label> </label>
                <input type="submit" value="Opslaan" class="btn btn-success btn-sm "/>
            </form>
        </div>
    </div>
</div>


<div id="copyWeekModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
        <span class="close closeCopyWeekModal  position-absolute">&times;</span>
        <label> </label>
        <div class="m-3 align-content-center">
            <form asp-action="CopyFromWeek">
                <h2 class="text-center">Kopieer rooster van week naar week</h2>
                <div class="row">
                    <span class="col-6">Weeknummer: </span>
                    @Html.EditorFor(model => model.CopyFromWeek, new { htmlAttributes = new { @class = "col-auto",@max = "52",@min="1" } })
                    
                </div>
                <div class="row">
                    <span asp-validation-for="CopyFromWeek" class="text-danger col"></span>
                </div>

                <div class="row">
                    <span class="col fw-light">Kopieren naar</span>
                </div>


                <div class="row">
                    <span class="col-6">Weeknummer: </span>
                    @Html.EditorFor(model => model.CopyToWeek, new { htmlAttributes = new { @class = "col-auto",@max = "52",@min="1" } })
                </div>
                <div class="row">
                    <span asp-validation-for="CopyToWeek" class="text-danger col"></span>
                </div>
                <input type="submit" value="Kopiëren" class="btn btn-success btn-sm " />
            </form>
        </div>
    </div>
</div>
</body>
@section Scripts
{
    <script>
        let rows = document.querySelectorAll('tr');
        let lastrow = rows[rows.length - 1];
        lastrow.addEventListener('click', () => {
            onRowClick();
        });
    
        const emptycells = Array.from(document.getElementsByClassName('roster-table-cell-empty'));
            
        emptycells.forEach(cell => {
            cell.addEventListener('click', function handleClick(event) {
                onRowClick();
            });
        });
        
        $(document).ready(function(){          
        $('#generate-roster-spinner').hide()
        // On click button, generate roster
        let genBtn = $('#generate-roster')
        genBtn.click(function() {
            // Show loading indicator
             $('#generate-roster-spinner').show()
             genBtn.prop('disabled', true);
             // Hide tooltip
             genBtn.tooltip('hide')
              $.ajax({
                  type: "POST",
                  url: '@Url.Action("GenerateRoster", "RosterManager")',
                  data: {
                      date: '@Model.Date'
                  },
                  success: function (data) {
                      if (data.value.incomplete) {
                          Swal.fire({
                               title: 'Oeps!',
                               text: "Rooster is aangemaakt, maar de prognose kon niet behaald worden. Handmatige bewerking is nog nodig!",
                               icon: 'warning',
                               confirmButtonText: 'Verversen'
                          }).then(function() {
                             location.reload();    
                          });
                      } else {
                       // Refresh page toast
                       const Toast = Swal.mixin({
                         toast: true,
                         position: 'top-end',
                         showConfirmButton: true,
                         timer: 3000,
                         timerProgressBar: true,
                         confirmButtonText: 'Verversen'
                       })
                       Toast.fire({
                         icon: 'success',
                         title: 'Rooster succesvol gegenereerd.'
                       }).then(function() {
                          location.reload();    
                       });
                      }
                  },
                  error: function (error) {
                      // Hide loading
                      $('#generate-roster-spinner').hide()
                      $('#generate-roster').prop('disabled', false);
                      // Show error                      
                      Swal.fire({
                        title: 'Oeps!',
                        text: error.responseText,
                        icon: 'error',
                        confirmButtonText: 'Oke'
                      })
                  }
                  // TODO: Handle errors
              });
        });
        });
    </script>
}
