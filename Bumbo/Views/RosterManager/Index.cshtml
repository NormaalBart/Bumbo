@model Bumbo.Models.RosterManager.RosterDayViewModel

@section Head
{
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.5.0/semantic.min.css" integrity="sha512-KXol4x3sVoO+8ZsWPFI/r5KBVB/ssCGB5tsv2nVOKwLg33wTFP3fmnXa47FdSVIshVTgsYk/1734xSk9aFIa4A==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
}

@{
    ViewBag.data = "Roster";
    if (Model.ErrorMessage != null)
    {
        ViewData["Title"] = "Rooster (1)";
    }
    else
    {
        ViewData["Title"] = "Rooster";
    }

}


<body class="roster-body">

<h1 class=" col-sm d-flex justify-content-center flex-nowrap">Rooster</h1>

@if (Model.CopiedShifts != 0)
{
    <div class="alert alert-success text-center" role="alert">
        @Model.CopiedShifts diensten succesvol gekopiëerd naar een andere dag.
    </div>
}


<!-- if modelstate that returned is not valid, say that saving failed-->
@if (Model.ErrorMessage != null)
{
    <div class="alert alert-danger text-center" role="alert">
        <strong>Oeps!</strong> De veranderingen konden niet opgeslagen worden omdat @Model.ErrorMessage
    </div>
}

@* Display CAO errors *@
@if (Model.InvalidShifts.Count > 0)
{
    <div class="alert alert-danger text-left" role="alert">
        <i class="bi-exclamation-triangle-fill"></i><strong> Oeps!</strong> Er zijn CAO overtredingen, deze zullen verholpen moeten worden voordat een nieuwe dienst aangemaakt kan worden.
        <ul>
            @foreach (var modelInvalidShift in Model.InvalidShifts)
            {
                <li>@modelInvalidShift.Key.GetErrorMessage()</li>
                <ul>
                    @foreach (var shift in modelInvalidShift.Value)
                    {
                        <li>
                            <strong>@shift.Employee.FullName():</strong> @shift.StartTime.ToString("HH\\:mm") - @shift.EndTime.ToString("HH\\:mm")
                        </li>
                    }
                </ul>
            }
        </ul>
    </div>
}


<div class="border border-2 border-dark rounded col-md-12 bg-white m-1">
    <div class="d-flex justify-content-between m-2 align-items-center text-center">
        <div>
            <a class="btn btn-primary" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(-1)">
                <i class="bi bi-caret-left"></i> Vorige dag
            </a>
        </div>
        <div class="fw-bold">
            <!--Week  number, date information which is in the center.-->
            Week @Model.GetWeekNumber(Model.Date)<br><span style="font-size:18px">@Model.Date.ToString("dddd d MMMM") @Model.Date.ToString("yyyy")</span>
        </div>
        <div>
            <a class="btn btn-primary" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(1)">
                Volgende dag <i class="bi bi-caret-right"></i>
            </a>
        </div>
    </div>
</div>


    <div>
        <div class="row ">
            <div class="col-sm d-flex justify-content-center flex-nowrap ">





            <div class="border col-sm d-flex justify-content-center flex-nowrap">

                <div class="vstack">
                    <div>
                        @Html.DisplayNameFor(model => model.CassierePrognoseHours):

                        @if (Model.CassierePrognoseHours == -1)
                        {
                            <span>Geen info</span>
                        }
                        else
                        {
                            <span title="Het aantal ingeplande uren." data-toggle="tooltip" data-placement="top">
                                @Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.CASSIERS)
                            </span>
                            <span>/</span>
                            <span title="Het aantal uren van de prognose." data-toggle="tooltip" data-placement="top"> @Model.CassierePrognoseHours </span>
                                if (Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.CASSIERS) >= Model.CassierePrognoseHours)
                            {
                                <i class="ms-1 bi-check-circle" style="color: green" title="Het aantal werkuren van de prognose zijn behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                            else
                            {
                                <i class="ms-1 bi-x-circle" style="color: red" title="Het aantal werkuren van de prognose zijn niet behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                        }
                    </div>
                    <div>
                        @Html.DisplayNameFor(model => model.CassierePrognoseWorkers):

                        @if (Model.CassierePrognoseWorkers == -1)
                        {
                            <span>Geen info</span>
                        }
                        else
                        {

                            <span title="Het aantal ingeplande medewerkers." data-toggle="tooltip" data-placement="top"> @Model.GetTotalPlannedWorkersPerDepartment(BumboData.Enums.DepartmentType.CASSIERS)</span>

                            <span> /</span>

                            <span title="Het aantal medewerkers van de prognose." data-toggle="tooltip" data-placement="top"> @Model.CassierePrognoseWorkers </span>
                                if (Model.GetTotalPlannedWorkersPerDepartment(BumboData.Enums.DepartmentType.CASSIERS) >= Model.CassierePrognoseWorkers)
                            {
                                <i class="ms-1 bi-check-circle" style="color: green" title="Het medewerker aantal van de prognose is behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                            else
                            {
                                <i class="ms-1 bi-x-circle" style="color: red" title="Het medewerker aantal van de prognose is niet behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                        }
                    </div>
                </div>
            </div>




            <div class="border col-sm d-flex justify-content-center flex-nowrap ">

                <div class="vstack">
                    <div>
                        @Html.DisplayNameFor(model => model.FreshPrognoseHours):

                        @if (Model.FreshPrognoseHours == -1)
                        {
                            <span>Geen info</span>
                        }
                        else
                        {
                            <span title="Het aantal ingeplande uren." data-toggle="tooltip" data-placement="top"> @Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.FRESH)</span>
                            <span>/</span>
                            <span title="Het aantal uren van de prognose." data-toggle="tooltip" data-placement="top"> @Model.FreshPrognoseHours</span>
                                if (Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.FRESH) >= Model.FreshPrognoseHours)
                            {
                                <i class="ms-1 bi-check-circle" style="color: green" title="Het aantal werkuren van de prognose zijn behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                            else
                            {
                                <i class="ms-1 bi-x-circle" style="color: red" title="Het aantal werkuren van de prognose zijn niet behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                        }
                    </div>


                    <div>
                        @Html.DisplayNameFor(model => model.FreshPrognoseWorkers):

                        @if (Model.FreshPrognoseWorkers == -1)
                        {
                            <span>Geen info</span>
                        }
                        else
                        {
                                <span title="Het aantal ingeplande medewerkers." data-toggle="tooltip" data-placement="top"> @Model.GetTotalPlannedWorkersPerDepartment(BumboData.Enums.DepartmentType.FRESH)</span>
                            <span> /</span> 
                            <span title="Het aantal medewerkers van de prognose." data-toggle="tooltip" data-placement="top"> @Model.FreshPrognoseWorkers</span>
                                if (Model.GetTotalPlannedWorkersPerDepartment(BumboData.Enums.DepartmentType.FRESH) >= Model.FreshPrognoseWorkers)
                            {
                                <i class="ms-1 bi-check-circle" style="color: green" title="Het medewerker aantal van de prognose is behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                            else
                            {
                                <i class="ms-1 bi-x-circle" style="color: red" title="Het medewerker aantal van de prognose is niet behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                        }
                    </div>

                </div>
            </div>


            <div class="border col-sm d-flex justify-content-center flex-nowrap">
                <div class="vstack">
                    <div>
                        @Html.DisplayNameFor(model => model.StockersPrognoseHours) :

                        @if (Model.StockersPrognoseHours == -1)
                        {
                            <span>Geen info</span>
                        }
                        else
                        {
                            <span title="Het aantal ingeplande uren." data-toggle="tooltip" data-placement="top">@Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.FILLERS)</span>

                            <span> / </span>

                            <span title="Het aantal uren van de prognose." data-toggle="tooltip" data-placement="top">@Model.StockersPrognoseHours</span>
                                if (Model.GetTotalPlannedHoursPerDepartment(BumboData.Enums.DepartmentType.FILLERS) >= Model.StockersPrognoseHours)
                            {
                                <i class="ms-1 bi-check-circle" style="color: green" title="Het aantal werkuren van de prognose zijn behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                            else
                            {
                                <i class="ms-1 bi-x-circle" style="color: red" title="Het aantal werkuren van de prognose zijn niet behaald." data-toggle="tooltip" data-placement="top"></i>
                            }
                        }
                    </div>
                </div>
            </div>


        </div>
    </div>

                    <script>
                        'use strict';

                            // list of all shifts on screen.
                            var listshifts = [];

                            // we use a script to get the width of a normal cell and base the width of the shift div on that, so that it should resize along with the screen if it changes.
                            function getWidthOfbase(elem, hours, minutepercstart, minutepercend) {
                                // So what we do here is we get the normal width of the first cell in the table
                                // we'll use this as a template for the width.
                                // We calculate the final width of the div
                                // using the width of a normal cell, times the amount of hours.
                                // We then calculate the offset of the div, using the time percentages.

                                let cell = document.querySelector('.roster-table-cell');

                                // gets width of cell, including the decimal numbers (incase a cell is half a pixel bigger than normal)!
                                let width = cell.getBoundingClientRect().width;

                                let finalwidth = (width * hours);

                                // this is the offset of the div caused by any minutes in the shift.
                                let startoffset = (width * (minutepercstart * 0.01));
                                let endoffset = (width * (minutepercend * 0.01));

                                // We set the width of the div using the calculated values.
                                elem.style.width = finalwidth - startoffset + endoffset + 'px';

                                // We move the div right using the minute percentages.
                                elem.style.marginLeft = startoffset + 'px';
                            }

        // Everytime the screen is resized, we resize every shift that's in the list along with it.
        window.addEventListener("resize", function () {
            listshifts.forEach(resize);
        });

        window.addEventListener('load', function () {
            listshifts.forEach(resize);

        });

                            // When you click on a shift, this function is called.
                            // This opens the edit modal
                            // and sets the id of the shift.
                            function onShiftClick(shiftinfo){
                                $('#editExistingShiftModal').modal('show');
                                document.getElementById("shiftIdInput").value = shiftinfo.shiftid;
                                document.getElementById("starttimeinput").value = shiftinfo.shiftStartHour;
                                document.getElementById("endtimeinput").value = shiftinfo.shiftEndTimeHour;
                                document.getElementById("departmentIdInput").value =  shiftinfo.shiftDepartmentId;
                                
                                // Disable editing when shift is set as sick
                                $('#starttimeinput').prop('disabled', shiftinfo.shiftIsSick);
                                $('#endtimeinput').prop('disabled', shiftinfo.shiftIsSick);
                                $('#departmentIdInput').prop('disabled', shiftinfo.shiftIsSick);
                                $('#saveEditShift').prop('disabled', shiftinfo.shiftIsSick);

                                let sickBtn = $('#setSickBtn')
                                sickBtn.prop('disabled', shiftinfo.shiftIsSick);
                                $('#employeeIdInputEdit').val(shiftinfo.shiftEmployeeId);
                                
                                selectedEmployee(shiftinfo.shiftEmployeeId, shiftinfo.shiftDepartmentId)
                            }

        function openCreateShift() {
            // Clear departments in create shift modal
            $('#CreateShiftDepartment').empty();
                                
            $('#createNewShiftModal').modal('show');
        }

                            function replaceShift(start, end, departmentId) {
                                document.getElementById("CreateShiftStartTime").value = start;
                                document.getElementById("CreateShiftEndTime").value = end;
                                document.getElementById("CreateShiftDepartment").value = departmentId

                                openCreateShift();
                            }

    </script>


    <div class="text-center m-3">
        <button type="button" data-bs-toggle="modal" data-bs-target="#copyRosterModal" class="btn btn-primary">
            Rooster kopiëren
        </button>
        <!-- Button trigger modal -->
        <button @((Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00") ? "disabled" : "") type="button" class="btn btn-primary" onclick="openCreateShift()">
            Voeg dienst toe<span class="bi bi-plus-lg ms-1"></span>
        </button>
        <button id="generate-roster" class="btn btn-primary" data-toggle="tooltip" data-placement="top" @((Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00") ? "disabled" : "") title="@(Model.RosteredEmployees.Count > 0 ? "Door aan te vullen zal het systeem automatisch diensten plannen, tot dat de prognose bereikt is." : "Genereert een rooster automatisch, die voldoet aan de ingestelde prognose.")"><span id="generate-roster-spinner" class="spinner-border spinner-border-sm me-2"></span>@(Model.RosteredEmployees.Count > 0 ? "Rooster aanvullen" : "Rooster genereren")<span class="bi bi-magic ms-1"></span></button>
    </div>

    @if (Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00")
    {
        <div class="alert alert-warning text-center text-large">
            <span>De winkel is op deze datum gesloten.</span>
        </div>
    }
    <div class="table-responsive-sm">

                        <!--table, 24 long horizontal -->
                    <table class="table roster-table table-hover">
                    
                    @if (Model.CloseTime != TimeOnly.MinValue && Model.OpenTime != TimeOnly.MinValue)
                    {
                        <thead class="sticky-lg-top">
                        <tr>
                            <th class="border border-2 border-dark roster-table-employee-cell roster-table-header-cell text-center">Medewerker naam</th>
                            @*Important note: The text in the header blocks must be equal characters long.*@
                            @for (var i = Model.TableMinHour; i < Model.TableMaxHour; i++)
                            {
                                <th class="border border-2 border-dark roster-table-header-cell text-center">@Model.GetHeaderTimeString(i)</th>
                            }
                        </tr>
                        </thead>
                    }
                        

            <tbody>

                <!--For each available employee, create a row-->
                @if (Model.RosteredEmployees != null)
                {
                    foreach (var employee in Model.RosteredEmployees)
                    {
                                        <tr class="roster-shift-containter" style="height: 4em">
                                            <td class="small roster-table-employee-cell text-center" style="vertical-align: middle;">
                                                <p>@employee.FullName</p>
                                            </td>

                            @for (var i = Model.TableMinHour; i < Model.TableMaxHour; i++)
                            {
                                var shift = Model.GetShiftOnHourOfEmployee(employee, i);
                                @if (shift != null)
                                {
                                    var invalidPairs = shift.ViolatedRules;
                                    var showError = invalidPairs.Any();
                                    // Red background when shift is invalid.
                                    var background = showError ? "background: red;" : shift.Sick ? "background: orange;" : "";
                                    var error = showError ? string.Join(" | ", invalidPairs.Select(s => s.GetErrorMessage())) : "";

                                                    <td id="roster-start" class="roster-table-cell @(Model.IsOutSideOfOpeningTimes(i) ? "roster-table-cell-closed" : "")" title="@error">
                                                        <div id="roster-start-div" class="roster-shift text-center h-100" style="@background" runat="server">
                                            @*If the shift is very short, we use a different string not make it ugly.*@
                                            @if (Model.GetShiftHourLength(employee, i) < 2)
                                            {
                                                                <p class="align-self-center"> @shift.Department.DepartmentName </p>
                                            }
                                            else
                                            {
                                                                <p class="align-self-center"> * @shift.Department.DepartmentName *</p>
                                            }
                                            @if (shift.Sick)
                                            {
                                                                <p class="fw-bold d-inline-block">Ziek -</p>
@*                                                                 <a class="d-inline-block" data-toggle="tooltip" data-placement="top" title="Maak de shift opnieuw aan een selecteer een nieuwe medewerker die de shift zal overnemen." href="" onclick="(function(e){ *@
@*                                             let shiftStartTime ='@shift.StartTime.ToString("HH:mm")'; *@
@*                                             let shiftEndTime = '@shift.EndTime.ToString("HH:mm")'; *@
@* *@
@*                                             e.stopPropagation(); *@
@*                                             replaceShift(shiftStartTime, shiftEndTime, @shift.Department.Id) *@
@*                                          })(arguments[0]);return false;">Opnieuw inplannen</a> *@
                                            }

                                                            <script>
                                                                // gets the div above, and passes it to a function which then sets the div length based on the shift length.
                                                                var divs = document.querySelectorAll('div');
                                                                var above_div = divs[divs.length - 1];

                                                                getWidthOfbase(above_div, @Model.GetShiftHourLength(employee, i), @Model.GetShiftStartPercentage(employee, i), @Model.GetShiftEndPercentage(employee, i));

                                                                // we add this shift to the list of shifts:
                                                                var shift = {
                                                                    element: above_div,
                                                                sick: @shift.Sick.ToString().ToLower(),
                                                                shiftlength: @Model.GetShiftHourLength(employee, i),
                                                                shiftstartperc: @Model.GetShiftStartPercentage(employee, i),
                                                                shiftendperc: @Model.GetShiftEndPercentage(employee, i),
                                                                shiftid: @shift.Id,
                                                                shiftStartTime: '@shift.StartTime.ToString("HH:mm")',
                                                                shiftEndTime: '@shift.EndTime.ToString("HH:mm")'};

                                                                listshifts.push(shift);

                                                                // possibly in the future
                                                                // shiftid, employeename, employeeid, departmentname, departmentid, starttime, endtime
                                                                // pass these values along with the function to auto fill the modal.

                                                                var shiftinfo = {
                                                                    shiftid: shift.shiftid,
                                                                    shiftStartHour: shift.shiftStartTime,
                                                                    shiftEndTimeHour: shift.shiftEndTime,
                                                                    shiftDepartmentId: '@shift.Department.Id',
                                                                    shiftEmployeeId: '@employee.Id',
                                                                    shiftIsSick: shift.sick
                                                                };

                                                                above_div.addEventListener("click", onShiftClick.bind(this, shiftinfo), false);
                                                            </script>
                                                        </div>

                                                    </td>
                                }
                                else
                                {
                                    if (Model.IsPlanned(employee, i))
                                    {
                                                        <td class="roster-table-cell @(Model.IsOutSideOfOpeningTimes(i) ? "roster-table-cell-closed" : "")">
                                                        </td>
                                    }
                                    else
                                    {
                                                        <td class="roster-table-cell roster-table-cell-empty @(Model.IsOutSideOfOpeningTimes(i) ? "roster-table-cell-closed" : "")" title="@(Model.IsOutSideOfOpeningTimes(i) ? "Winkel is gesloten" : "")">
                                                        </td>
                                    }
                                }
                            }

                                        </tr>
                    }

                    <!--Add new shift row.-->
                    @if (Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00")
                    {
                                        <tr class="roster-shift-containter roster-table-cell-closed border border-3 ">
                                            <td colspan="25" class="roster-table-employee-cell text-center">

                                                <a class="btn btn-primary text-large text-decoration-none" asp-controller="Branch" asp-action="EditManager">Openingstijden aanpassen</a>
                                            </td>

                                        </tr>
                    }
                    else
                    {
                                    <td colspan="25" class=text-center>
                            @if (Model.RosteredEmployees.Count == 0 && !(Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00"))
                            {
                                            <div class="justify-content-center mx-auto d-flex justify-content-center">

                                                <span class="alert alert-primary text-center "> Er zijn op dit moment nog geen medewerkers ingepland, voeg een nieuwe medewerker toe aan het rooster met de knop hieronder.</span>
                                            </div>
                            }
                                    </td>
                                    <tr class="roster-shift-containter roster-table-addbtn border-3" id="AddShiftRow" onclick="openCreateShift()">
                                        <td colspan="25" class="p-0">
                                            <button @(Model.CloseTime.ToString() == "00:00" && Model.OpenTime.ToString() == "00:00" ? "disabled" : "") type="button" class="btn btn-primary w-100 h-100" onclick="openCreateShift()">
                                                Voeg dienst toe<span class="bi bi-plus-lg ms-1"></span>
                                            </button>
                                        </td>
                                    </tr>
                    }
                }

        </tbody>
    </table>

                </div>

                <!-- Modal for creating a new shift-->
<div class="modal fade" id="createNewShiftModal" tabindex="-1" aria-labelledby="nieuwedienst" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content m-2">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addShiftModal">Nieuwe dienst toevoegen</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body m-2">
                <form asp-action="CreateShift" id="createShiftForm">
                    <input type="hidden" asp-for="Date"/>


                    @Html.HiddenFor(s => s.SelectedEmployeeId, new {@id = "select-employee-id"})
                    <div class="row center">
                        <span class="col">Medewerker:</span>
                        <div class="col">
                            <div id="search-employees" class="ui search">
                                <div class="ui icon input">
                                    <input class="prompt" type="text" placeholder="Medewerker zoeken">
                                    <i class="search icon"></i>
                                </div>
                                <div class="results"></div>

                                <div class="form-check my-2 ms-2">
                                    <input class="form-check-input normal-checkbox" type="checkbox" value="" id="searchExternal">
                                    <label class="form-check-label" for="searchExternal">Extern zoeken</label>
                                </div>
                            </div>
                        </div>

                        <label class="col">In afdeling:</label>

                        <select id="CreateShiftDepartment" asp-for="SelectedDepartmentId" class="form-control col department-input" style="height: fit-content">
                            
                        </select>
                    </div>

                    <div class="row pt-2">
                        <p class="col">Startijd:</p>
                        <input id="CreateShiftStartTime" asp-for="SelectedStartTime" class="form-control timepicker col"/>

                        <p class="col">Eindtijd:</p>
                        <input id="CreateShiftEndTime"asp-for="SelectedEndTime" class="form-control timepicker col"/>
                    </div>

                    <hr/>
                    <div class="row my-3">
                        <p class="col">Winkel opent:</p>
                        <p class="col">@Model.OpenTime </p>
                        <p class="col">Winkel sluit:</p>
                        <p class="col">@Model.CloseTime </p>
                    </div>
                </form>

            </div>
            <div class="text-center modal-footer">
                <button type="button" class="btn btn-secondary text-center" data-bs-dismiss="modal">Annuleren</button>
                <input id="create-shift-save" type="submit" value="Opslaan" form="createShiftForm" class="btn btn-success btn "/>
            </div>
        </div>
    </div>
</div>

<!-- The Modal -->
<div id="copyRosterModal" class="modal fade">
    <div class="modal-dialog modal-lg">
        <!-- Modal content -->

        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="copyRosterModal">Kopieer rooster van dag naar dag</h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="m-3 align-content-center">
                <form asp-action="CopyRoster">
                    <div class="row justify-content-center">
                        <span class="col-auto text-end">Dag: </span>
                        @Html.EditorFor(model => model.CopyFrom, new { htmlAttributes = new { @class = "col-auto" } })
                    </div>
                    <div class="row">
                        <span asp-validation-for="CopyFrom" class="text-danger col-4"></span>
                    </div>
                    <div class="row justify-content-center">
                        <span class="col-5">Kopieren naar</span>
                    </div>
                    <div class="row justify-content-center">
                        <span class="col-auto">Dag: </span>
                        @Html.EditorFor(model => model.CopyTo, new { htmlAttributes = new { @class = "col-auto" } })
                    </div>
                    <div class="row">
                        <span asp-validation-for="CopyTo" class="text-danger col"></span>
                    </div>
                    <input type="submit" value="Kopiëren" class="btn btn-primary float-end" />
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal for editing a shift-->
<div class="modal fade" id="editExistingShiftModal" tabindex="-1" aria-labelledby="wijzigdienst" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="addShiftModal">Dienst wijzigen</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="EditShift" id="editShiftForm">
                    <input type="hidden" asp-for="Date"/>
                    <input id="shiftIdInput" type="hidden" asp-for="SelectedShiftId"/>
                    <div class="row">
                        <p class="col">Medewerker:</p>

                        <select id="employeeIdInputEdit" disabled asp-for="SelectedEmployeeId" class="form-control col">
                            @foreach (var employee in Model.AvailableEmployees)
                            {
                                <option value="@employee.Id">@employee.FullName</option>
                            }
                        </select>

                        <p class="col">In afdeling:</p>
                        <select id="departmentIdInput" asp-for="SelectedDepartmentId" class="form-control col department-input">

                        </select>
                    </div>

                    <div class="row pt-2">
                        <p class="col">Startijd:</p>
                        <input id="starttimeinput" asp-for="SelectedStartTime" class="timepicker form-control col"/>

                        <p class="col">Eindtijd:</p>
                        <input id="endtimeinput" asp-for="SelectedEndTime" class="timepicker form-control col"/>
                    </div>

                    <hr/>
                    <div class="row my-3">
                        <p class="col">Winkel opent:</p>
                        <p class="col">@Model.OpenTime </p>
                        <p class="col">Winkel sluit:</p>
                        <p class="col">@Model.CloseTime </p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuleren</button>
                <button id="deleteShiftBtn" type="button" class="btn btn-danger" onclick="confirmDeleteShift()">Verwijder dienst</button>
                <button id="setSickBtn" type="button" class="btn btn-warning" onclick="setShiftSick()">Medewerker ziek melden</button>
                <input id="saveEditShift" type="submit" value="Opslaan" form="editShiftForm" class="btn btn-success btn "/>
            </div>
        </div>
    </div>
</div>
</body>
@section Scripts
{
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.5.0/semantic.min.js" integrity="sha512-Xo0Jh8MsOn72LGV8kU5LsclG7SUzJsWGhXbWcYs2MAmChkQzwiW/yTQwdJ8w6UA9C6EVG18GHb/TrYpYCjyAQw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
    
    // Translate semantic ui
    $.fn.search.settings.error.noResults = 'Geen resultaten gevonden'
    // Only way to translate the header is by completely overwriting it
    $.fn.search.settings.templates.message = function(message, type) {
        let html = '';
        if (message !== undefined && type !== undefined) {
            html += '' + '<div class="message ' + type + '">';;
            // message type
            if (type == 'empty') {
                html += '' +
                    '<div class="header">Geen resultaten</div class="header">' +
                    '<div class="description">' + message + '</div class="description">';;
            } else {
                html += ' <div class="description">' + message + '</div>';
            }
            html += '</div>';
        }
        return html;
    }

    // Employee search change mode when external checkmark is clicked
    $(document).ready(function() {
        changeExternalEmployeeSearchMode(false)
        $('#searchExternal').change(function() {
            changeExternalEmployeeSearchMode(this.checked);
        });
    });

    // Changes the employee search mode from external to internal depending on given boolean
    function changeExternalEmployeeSearchMode(external) {
        if (external) {
            // Setup search employee
            $('#search-employees')
                .search({
                    type: 'category',
                    maxResults: 20,
                    cache: false,
                    apiSettings: {
                        url: 'SearchEmployees/?q={query}&external=true'
                    },
                    onSelect: function(result, response) {
                        selectedEmployee(result.id);
                    },
                });
        } else {
            $('#search-employees')
                .search({
                    maxResults: 20,
                    cache: false,
                    apiSettings: {
                        url: 'SearchEmployees/?q={query}'
                    },
                    onSelect: function(result, response) {
                        selectedEmployee(result.id);
                    }
                })
        }
    }
    
    function selectedEmployee(employeeId, departmentId) {
        $('#select-employee-id').val(employeeId);
        
        $('.department-input').each(function() {
           $(this).empty();
        });
        
        // Start loading the allowed departments of the employee.
        $.ajax({
            type: "POST",
            url: '@Url.Action("AllowedDepartments", "EmployeeManager")',
            data: {
                employeeId: employeeId,
            },
            success: function(data) {
                $('#create-shift-save').prop('disabled', data.length === 0);
                $('#saveEditShift').prop('disabled', data.length === 0);
                                                        
                // Update the ui with the received departments.
                $('.department-input').each(function() {
                    let $el = $(this);
                    
                    $el.empty(); // Remove old options
                    if (data.length > 0) {
                       $.each(data, function(index,value) {
                       $el.append($("<option></option>")
                           .attr("value", value.id)
                           .text(value.departmentName));
                       });
                    } else { 
                    // If the employee has no departments, add a placeholder option.
                        $el.append($("<option></option>")
                          .attr("value", "").text("Geen afdelingen toegewezen"));
                    }
                    
                    // Try and reselect value, only the edit form.
                    if (departmentId != null && !($el.attr('id') === 'CreateShiftDepartment')) {
                        $el.val(departmentId);
                    }
                });
            },
            error: function(error) {
                console.log("Error: " + error);
            }
        })
    }

    function showToast(message) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: true,
            timer: 3000,
            timerProgressBar: true,
            confirmButtonText: 'Verversen'
        })
        Toast.fire({
            icon: 'success',
            title: message
        }).then(function() {
            location.reload();
        });
    }

    function confirmDeleteShift() {
        $('#editExistingShiftModal').modal('hide');
        Swal.fire({
            confirmButtonColor: '#d33',
            icon: 'warning',
            title: 'Dienst verwijderen uit het rooster?',
            text: 'Door de dienst te verwijderen zal de medewerker niet betaald worden voor deze dienst, ook niet als deze als ziek geregistreerd stond.',
            showCancelButton: true,
            confirmButtonText: 'Verwijderen',
            cancelButtonText: 'Annuleren',
        }).then((result) => {
            if (result.isConfirmed) {
                // Verwijder shift
                let shiftId = document.getElementById("shiftIdInput").value;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DeleteShift", "RosterManager")',
                    data: {
                        shiftId: shiftId,
                    },
                    success: function(data) {
                        showToast("Dienst is verwijderd.")
                    },
                    error: function(error) {
                        console.log("Error: " + error);
                    }
                })
            }
        })
    }

    function setShiftSick() {
        $('#editExistingShiftModal').modal('hide');
        Swal.fire({
            confirmButtonColor: '#d33',
            icon: 'warning',
            title: 'Medewerker voor dienst ziekmelden?',
            showCancelButton: true,
            confirmButtonText: 'Ziek melden',
            cancelButtonText: 'Annuleren',
        }).then((result) => {
            if (result.isConfirmed) {
                // Ziek melden opslaan
                let shiftId = document.getElementById("shiftIdInput").value;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("RegisterSick", "RosterManager")',
                    data: {
                        shiftId: shiftId,
                        sick: true,
                    },
                    success: function(data) {
                        showToast("Medewerker ziek gemeld.")
                    },
                    error: function(error) {
                        console.log("Error: " + error);
                    }
                })
            }
        })
    }

    $(document).ready(function() {
        $('.timepicker').timepicker({
            timeFormat: 'HH:mm',
            interval: 15,
            minTime: '@Model.OpenTime',
            maxTime: '@Model.CloseTime',
            defaultTime: '@Model.OpenTime',
            startTime: '1',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
        });
    });

    const emptycells = Array.from(document.getElementsByClassName('roster-table-cell-empty'));

    emptycells.forEach(cell => {
        cell.addEventListener('click', function handleClick(event) {
            openCreateShift();
        });
    });

    $(document).ready(function() {
        $('#generate-roster-spinner').hide()
        // On click button, generate roster
        let genBtn = $('#generate-roster')
        genBtn.click(function() {
            // Show loading indicator
            $('#generate-roster-spinner').show()
            genBtn.prop('disabled', true);
            // Hide tooltip
            genBtn.tooltip('hide')
            $.ajax({
                type: "POST",
                url: '@Url.Action("GenerateRoster", "RosterManager")',
                data: {
                    date: '@Model.Date'
                },
                success: function(data) {
                    if (data.value.incomplete) {
                        Swal.fire({
                            title: 'Oeps!',
                            text: "Rooster is aangemaakt, maar de prognose kon niet behaald worden. Handmatige bewerking is nog nodig!",
                            icon: 'warning',
                            confirmButtonText: 'Verversen'
                        }).then(function() {
                            location.reload();
                        });
                    } else {
                        // Refresh page toast
                        showToast("Rooster is succesvol gegenereerd!");
                    }
                },
                error: function(error) {
                    // Hide loading
                    $('#generate-roster-spinner').hide()
                    $('#generate-roster').prop('disabled', false);
                    // Show error
                    Swal.fire({
                        title: 'Oeps!',
                        text: error.responseText,
                        icon: 'error',
                        confirmButtonText: 'Oke'
                    })
                }
                // TODO: Handle errors
            });
        });
        });
    </script>
}
