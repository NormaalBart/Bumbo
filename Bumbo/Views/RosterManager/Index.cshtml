@model Bumbo.Models.RosterManager.RosterDayViewModel



<h1 class=" col-sm d-flex justify-content-center flex-nowrap">Rooster</h1>



<div class="d-flex justify-content-between m-4 border rounded-2">
    <button class="btn btn-outline-primary">
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(-1).Date"> Vorige dag </a>
    </button>
    
    <p>Week @Model.GetWeekNumber(Model.Date) | @Model.Date.ToShortDateString() </p>

    <button class="btn btn-outline-primary">
        <a class="text-decoration-none" asp-action="Index" asp-route-dateInput="@Model.Date.AddDays(1).Date"> Volgende dag </a>
    </button>


</div>



<div>
    <button btn btn-outline-secondary>
        <a class="text-decoration-none" asp-action="Edit" asp-controller="Prognosis" asp-route-id="@Model.PrognosisDayId">(Edit prognose) Nog te roosterde uren: </a>
    </button>

</div>
  
<div>

    <dl class="row border">
        <div class="border col-sm d-flex justify-content-center flex-nowrap">

            <dt>
                @Html.DisplayNameFor(model => model.CassierePrognose) :
            </dt>
            <dd>
                @if (Model.CassierePrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.CassierePrognose Uren</span>
                }
            </dd>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <dt>
                @Html.DisplayNameFor(model => model.FreshPrognose) :
            </dt>
            <dd>
                @if (Model.FreshPrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.FreshPrognose Uren</span>
                }
            </dd>
        </div>

        <div class="border col-sm d-flex justify-content-center flex-nowrap">
            <dt>
                @Html.DisplayNameFor(model => model.StockersPrognose) :
            </dt>
            <dd>
                @if (Model.StockersPrognose == -1)
                {
                    <span>Geen Info</span>
                }
                else
                {
                    <span>@Model.StockersPrognose Uren</span>
                }
            </dd>
        </div>



    </dl>
</div>

<div>
    <div class="h-100 d-flex align-items-center justify-content-center">
        <form>
            <div class="form-group">
                <button class="btn btn-outline-primary">
                    <a type="submit" class="text-decoration-none" asp-action="Index" asp-route-department=""> Update rooster </a>
                </button>

            </div>
        </form>
    </div>

    <div class="border border-1" style="background-color: white;">

        <div class="h-100 d-flex align-items-center justify-content-center">
            <div style="background-color: yellow ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Kassa afdeling</p>
            </div>
            <div style="background-color: green ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Vers afdeling</p>
            </div>
            <div style="background-color: saddlebrown ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Vakken vuller afdeling</p>
            </div>
            <div style="background-color: white ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder">Niet ingepland</p>
            </div>
            <div style=" background-color: red ; padding: 10px; border: 1px solid black;">
                <p class="fw-bolder"> Niet beschikbaar </p>

            </div>

        </div>




        <!--table, 24 long horizontal -->
        <table class="table" style="background-color: white;">
            <thead>
                <tr style="width: 4%;">
                    <th>Werknemer Naam</th>
                    @for (int i = 7; i < 25; i++)
                    {

                        <th>@i</th>
                    }
                </tr>
            </thead>



            <tbody>

                <!--For each available employee, create a row-->
                @if (Model.Employees != null)
                {
                    foreach (var employee in Model.Employees)
                    {
                        <tr style="width: 4%;">
                            <td>
                                @employee.FullName

                            </td>
                            @for (int i = 7; i < 24; i++)
                            {


                                @if (Model.IsPlanned(employee, i))
                                {
                                    // TODO: Redo code
                                    @*switch (Model.GetEmployeeDepartmentShift(employee, i))
                                    {
                                        case DepartmentEnum.Cassiere:
                                            <td style="width: 4%; background-color: yellow ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        case DepartmentEnum.Fresh:
                                            <td style="width: 4%; background-color: green ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        case DepartmentEnum.Stocker:
                                            <td style="width: 4%; background-color: saddlebrown ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                        default:
                                            <td style="width: 4%; background-color: white ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                            break;
                                    }*@
                                }
                                else
                                {

                                    if (Model.IsUnavailable(employee, i))
                                    {
                                        <td style=" width: 4%; background-color: red ; padding: 10px; border: 1px solid darkgrey;"> </td>
                                    }
                                    else
                                    {
                                        <td style=" width: 4%; background-color: white ; padding: 10px; border: 1px solid darkgrey;">

                                            @*<div> <a class="nav-link text-dark" asp-area="" asp-controller="RosterManager" asp-route-employeeId="@employee.Id" asp-route-prognosisId="@Model.PrognosisDay.Id" asp-route-dateInput="@Model.Date.AddHours(i)" asp-action="Create"></a> </div>*@
                                        </td>
                                    }

                                }



                            }
                            <td>
                                <a class="nav-link text-dark" asp-area="" asp-controller="RosterManager" asp-route-employeeId="@employee.Id" asp-route-prognosisId="@Model.PrognosisDayId" asp-route-dateInput="@Model.Date.ToShortDateString()" asp-action="Create">Voeg dienst toe</a>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>

    </div>

</div>


<style type="text/css">
    p, body, td, input, select, button {
        font-family: -apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif;
        font-size: 14px;
    }

    body {
        padding: 0px;
        margin: 0px;
        background-color: #ffffff;
    }

    a {
        color: #1155a3;
    }

    .space {
        margin: 10px 0px 10px 0px;
    }

    .header {
        background: #003267;
        background: linear-gradient(to right, #011329 0%,#00639e 44%,#011329 100%);
        padding: 20px 10px;
        color: white;
        box-shadow: 0px 0px 10px 5px rgba(0,0,0,0.75);
    }

        .header a {
            color: white;
        }

        .header h1 a {
            text-decoration: none;
        }

        .header h1 {
            padding: 0px;
            margin: 0px;
        }

    .main {
        padding: 10px;
        margin-top: 10px;
    }

    .generated {
        color: #999;
    }

        .generated a {
            color: #999;
        }
</style>

<!-- DayPilot library -->


    <div class="main">
        <div id="dp"></div>
      
    </div>

    <script>
        const dp = new DayPilot.Scheduler("dp", {
            locale: "nl-nl",
            timeHeaders: [{ "groupBy": "Day" }, { "groupBy": "Hour" }],
            scale: "Hour",
            days: 1,
            startDate: DayPilot.Date.today(),
            businessWeekends: true,
            timeRangeSelectedHandling: "Enabled",
            onTimeRangeSelected: async (args) => {
                const dp = args.control;
                const modal = await DayPilot.Modal.prompt("Create a new event:", "Event 1");
                dp.clearSelection();
                if (modal.canceled) { return; }
                dp.events.add({
                    start: args.start,
                    end: args.end,
                    id: DayPilot.guid(),
                    resource: args.resource,
                    text: modal.result
                });
            },
            eventMoveHandling: "Update",
            onEventMoved: (args) => {
                args.control.message("Event moved: " + args.e.text());
            },
            eventResizeHandling: "Update",
            onEventResized: (args) => {
                args.control.message("Event resized: " + args.e.text());
            },
            eventDeleteHandling: "Update",
            onEventDeleted: (args) => {
                args.control.message("Event deleted: " + args.e.text());
            },
            eventClickHandling: "Disabled",
            eventHoverHandling: "Bubble",
            bubble: new DayPilot.Bubble({
                onLoad: (args) => {
                    // if event object doesn't specify "bubbleHtml" property
                    // this onLoad handler will be called to provide the bubble HTML
                    args.html = "Event details";
                }
            }),
            treeEnabled: true,
        });
        dp.resources = [
            { name: "Resource 1", id: "R1" },
            { name: "Resource 2", id: "R2" },
            { name: "Resource 3", id: "R3" },
            { name: "Resource 4", id: "R4" },
            { name: "Resource 5", id: "R5" },
            { name: "Resource 6", id: "R6" },
            { name: "Resource 7", id: "R7" },
            { name: "Resource 8", id: "R8" },
            { name: "Resource 9", id: "R9" },
        ];
        dp.events.list = [];
        dp.init();
    </script>

